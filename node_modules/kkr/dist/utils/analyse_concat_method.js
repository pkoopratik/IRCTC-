"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConcatMethod = void 0;
const exec_command_1 = require("./exec_command");
const fs = require("fs");
var ConcatMethod;
(function (ConcatMethod) {
    ConcatMethod[ConcatMethod["UNKNOWN"] = 0] = "UNKNOWN";
    ConcatMethod[ConcatMethod["DIRECT_CONCAT"] = 1] = "DIRECT_CONCAT";
    ConcatMethod[ConcatMethod["FFMPEG_CONCAT"] = 2] = "FFMPEG_CONCAT";
})(ConcatMethod = exports.ConcatMethod || (exports.ConcatMethod = {}));
const analyseConcatMethod = (file1, file2) => {
    return new Promise((resolve) => __awaiter(void 0, void 0, void 0, function* () {
        let isTimeout = false;
        setTimeout(() => {
            if (!isTimeout) {
                isTimeout = true;
                resolve(ConcatMethod.UNKNOWN);
            }
        }, 25000);
        // Call FFprobe
        const command = `ffprobe -i "${file2}" -hide_banner -show_packets -print_format json>${file2}.packets`;
        try {
            yield exec_command_1.default(command, true);
            const output = JSON.parse(fs.readFileSync(`${file2}.packets`).toString());
            if (output.packets[0].pts === 0) {
                resolve(ConcatMethod.FFMPEG_CONCAT);
            }
            else {
                resolve(ConcatMethod.DIRECT_CONCAT);
            }
        }
        catch (e) {
            resolve(ConcatMethod.UNKNOWN);
        }
    }));
};
exports.default = analyseConcatMethod;
//# sourceMappingURL=analyse_concat_method.js.map