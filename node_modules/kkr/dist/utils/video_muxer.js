"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VideoMuxer = exports.AudioSequence = exports.VideoSequence = exports.AudioTrack = exports.VideoTrack = void 0;
const fs = require("fs");
const path = require("path");
const events_1 = require("events");
const logger_1 = require("../core/services/logger");
const command_executer_1 = require("./command_executer");
class VideoTrack {
    constructor({ path }) {
        this.type = "video";
        this.path = path;
    }
}
exports.VideoTrack = VideoTrack;
class VideoSequence {
    constructor({ path }) {
        this.type = "video_sequence";
        this.path = path;
    }
}
exports.VideoSequence = VideoSequence;
class AudioTrack {
    constructor({ path }) {
        this.type = "audio";
        this.path = path;
    }
}
exports.AudioTrack = AudioTrack;
class AudioSequence {
    constructor({ path }) {
        this.type = "audio_sequence";
        this.path = path;
    }
}
exports.AudioSequence = AudioSequence;
class VideoMuxer extends events_1.EventEmitter {
    constructor(outputPath) {
        super();
        this.videoTracks = [];
        this.audioTracks = [];
        this.videoSequences = [];
        this.audioSequences = [];
        if (!outputPath) {
            throw new Error("请指定输出路径");
        }
        const parsedPath = path.parse(outputPath);
        this.outputPathName = parsedPath.name;
        this.outputPathExt = parsedPath.ext;
        this.outputPath = outputPath;
        this.commandExecuter = new command_executer_1.default();
    }
    addVideoTracks(...tracks) {
        this.videoTracks.push(...tracks);
    }
    addAudioTracks(...tracks) {
        this.audioTracks.push(...tracks);
    }
    addVideoSequences(...sequences) {
        this.videoSequences.push(...sequences);
    }
    addAudioSequences(...sequences) {
        this.audioSequences.push(...sequences);
    }
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            const allTracks = [...this.videoTracks, ...this.audioTracks, ...this.videoSequences, ...this.audioSequences];
            let command = "ffmpeg ";
            // Add input
            for (const track of allTracks) {
                if (track.type === "video_sequence" || track.type === "audio_sequence") {
                    command += `-f concat -safe 0 -i "${track.path}" `;
                }
                else {
                    command += `-i "${track.path}" `;
                }
            }
            // Add map settings
            for (let i = 0; i <= allTracks.length - 1; i++) {
                const nowTrack = allTracks[i];
                if (nowTrack.type.startsWith("video")) {
                    command += `-map ${i}:v `;
                }
                if (nowTrack.type.startsWith("audio")) {
                    command += `-map ${i}:a `;
                }
            }
            if (fs.existsSync(`${this.outputPathName}${this.outputPathExt}`)) {
                this.outputPathName = this.outputPathName + `_${new Date().valueOf().toString()}`;
            }
            command += "-loglevel error -stats ";
            if (this.outputPath.endsWith(".mkv")) {
                command += `-c copy -reserve_index_space 200k "${this.outputPathName}${this.outputPathExt}"`;
            }
            else if (this.outputPath.endsWith(".mp4")) {
                command += `-c copy -movflags faststart "${this.outputPathName}${this.outputPathExt}"`;
            }
            this.commandExecuter.on("stderr", (data) => {
                logger_1.default.info(data);
                this.emit("stderr", data);
            });
            this.commandExecuter.on("fail", (child) => {
                this.emit("fail", child);
            });
            this.commandExecuter.on("success", () => {
                this.emit("success", `${this.outputPathName}${this.outputPathExt}`);
            });
            this.commandExecuter.on("start", (child) => {
                this.emit("start");
            });
            this.commandExecuter.run(command, {
                output: ["stderr"],
            });
        });
    }
}
exports.VideoMuxer = VideoMuxer;
//# sourceMappingURL=video_muxer.js.map