"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BadResponseError = void 0;
const fs = require("fs");
const axios_1 = require("axios");
const sleep_1 = require("./sleep");
class BadResponseError extends Error {
}
exports.BadResponseError = BadResponseError;
const download = (url, dest, { timeout, cooldown }) => __awaiter(void 0, void 0, void 0, function* () {
    const CancelToken = axios_1.default.CancelToken;
    const source = CancelToken.source();
    let timer = setTimeout(() => {
        source.cancel();
    }, timeout || 60000);
    const response = yield axios_1.default({
        url,
        method: "GET",
        responseType: "arraybuffer",
        cancelToken: source.token,
    });
    if (response.headers["content-length"] && +response.headers["content-length"] !== response.data.length) {
        throw new BadResponseError("下载内容不完整");
    }
    clearTimeout(timer);
    fs.writeFileSync(dest, response.data);
    if (cooldown) {
        yield sleep_1.default(cooldown);
    }
});
exports.default = download;
//# sourceMappingURL=download_file.js.map