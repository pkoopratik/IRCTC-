"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkError = void 0;
const events_1 = require("events");
const youtube_1 = require("./youtube");
const axios_1 = require("axios");
const mpd_parser_1 = require("../../mpd_parser");
const select_format_1 = require("../../../utils/select_format");
const sleep_1 = require("../../../utils/sleep");
const logger_1 = require("../logger");
class NetworkError extends Error {
}
exports.NetworkError = NetworkError;
class YouTubeObserver extends events_1.EventEmitter {
    constructor({ videoUrl, format }) {
        super();
        this.playlistFetchInterval = 3500;
        this.audioUrlFlags = [];
        this.videoUrlFlags = [];
        this.videoUrl = videoUrl;
        if (format) {
            this.format = format;
        }
    }
    connect() {
        return __awaiter(this, void 0, void 0, function* () {
            // Get Heartbeat
            while (true) {
                try {
                    logger_1.default.info(`正在获取视频信息`);
                    const response = yield youtube_1.default.getHeartbeat(this.videoUrl);
                    if (response.status === "LIVE_STREAM_OFFLINE") {
                        logger_1.default.info(`直播尚未开始：${response.reason}`);
                    }
                    else {
                        break;
                    }
                    yield sleep_1.default(15000);
                }
                catch (e) {
                    logger_1.default.debug(e);
                    logger_1.default.warning(`获取直播信息失败 稍后重试`);
                    yield sleep_1.default(3000);
                }
            }
            // Get Video Info
            let retries = 3;
            while (retries > 0) {
                try {
                    const { mpdUrl, title, isLowLatencyLiveStream, latencyClass, isLiveDvrEnabled, isPremiumVideo, } = yield youtube_1.default.getVideoInfo(this.videoUrl);
                    this.mpdUrl = mpdUrl;
                    if (isLowLatencyLiveStream) {
                        this.playlistFetchInterval = 2000;
                    }
                    this.cycling();
                    return {
                        mpdUrl,
                        title,
                        isLowLatencyLiveStream,
                        latencyClass,
                        isLiveDvrEnabled,
                        isPremiumVideo,
                    };
                }
                catch (e) {
                    logger_1.default.debug(e);
                    logger_1.default.warning(`获取视频信息失败${retries < 3 ? ` 第 ${3 - retries} 次重试` : ""}`);
                    retries--;
                }
            }
        });
    }
    disconnect() {
        return __awaiter(this, void 0, void 0, function* () {
            clearInterval(this.playlistFetchTimer);
            clearInterval(this.mpdUrlFetchTimer);
        });
    }
    cycling() {
        return __awaiter(this, void 0, void 0, function* () {
            this.playlistFetchTimer = setInterval(() => __awaiter(this, void 0, void 0, function* () {
                try {
                    logger_1.default.debug("正获取MPD列表");
                    yield this.getVideoChunks();
                    logger_1.default.debug("获取MPD列表成功");
                }
                catch (e) {
                    logger_1.default.debug(e);
                    logger_1.default.info("获取MPD列表失败");
                }
            }), this.playlistFetchInterval);
            // Fresh MPD URL every hour
            this.mpdUrlFetchTimer = setInterval(() => __awaiter(this, void 0, void 0, function* () {
                try {
                    const { mpdUrl } = yield youtube_1.default.getVideoInfo(this.videoUrl);
                    this.mpdUrl = mpdUrl;
                }
                catch (e) { }
            }), 3600 * 1000);
            this.on("end", () => {
                clearInterval(this.playlistFetchTimer);
            });
        });
    }
    getVideoChunks() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const CancelToken = axios_1.default.CancelToken;
            const source = CancelToken.source();
            const timer = setTimeout(() => {
                source.cancel("Timeout");
            }, 8000);
            const mpdStr = (yield axios_1.default.get(this.mpdUrl, {
                cancelToken: source.token,
            })).data;
            clearTimeout(timer);
            const parseResult = mpd_parser_1.default(mpdStr);
            const { selectedVideoTrack, selectedAudioTrack } = select_format_1.default(this.format, parseResult);
            const newVideoUrls = [];
            for (const url of selectedVideoTrack.urls) {
                const id = parseInt(url.match(/\/sq\/(\d+)\//)[1]);
                if (isNaN(id)) {
                    logger_1.default.warning(`遇到了奇怪的URL 请截图给开发者：${url}`);
                    continue;
                }
                if (!this.videoUrlFlags[id]) {
                    newVideoUrls.push({
                        id,
                        url,
                    });
                    this.videoUrlFlags[id] = true;
                }
            }
            if (newVideoUrls.length > 0) {
                this.emit("new-video-chunks", newVideoUrls);
            }
            const newAudioUrls = [];
            for (const url of selectedAudioTrack.urls) {
                const id = parseInt(url.match(/\/sq\/(\d+)\//)[1]);
                if (isNaN(id)) {
                    logger_1.default.warning(`遇到了奇怪的URL 请截图给开发者：${url}`);
                    continue;
                }
                if (!this.audioUrlFlags[id]) {
                    newAudioUrls.push({
                        id,
                        url,
                    });
                    this.audioUrlFlags[id] = true;
                }
            }
            if (newAudioUrls.length > 0) {
                this.emit("new-audio-chunks", newAudioUrls);
            }
            if (((_b = (_a = parseResult.rawMpd) === null || _a === void 0 ? void 0 : _a.MPD) === null || _b === void 0 ? void 0 : _b.attr["@_type"]) === "static") {
                // 直播结束
                this.emit("end");
            }
        });
    }
}
exports.default = YouTubeObserver;
//# sourceMappingURL=youtube_observer.js.map