/// <reference types="node" />
import { EventEmitter } from "events";
import { ConcatMethod } from "../utils/analyse_concat_method";
import { ConsoleLogger } from "./services/logger";
export declare class DownloadError extends Error {
}
export interface DownloaderOptions {
    videoUrl: string;
    format?: string;
    verbose?: boolean;
    keep?: boolean;
    threads?: number;
    concatMethod?: ConcatMethod;
    headers?: string;
}
declare class Downloader extends EventEmitter {
    videoUrl: string;
    format: string;
    keepTemporaryFiles: boolean;
    videoChunkUrls: string[];
    audioChunkUrls: string[];
    downloadedVideoChunkFiles: string[];
    downloadedAudioChunkFiles: string[];
    workDirectoryName: string;
    outputFilename: string;
    verbose: boolean;
    logger: ConsoleLogger;
    maxThreads: number;
    rawHeaders: string;
    enableCustomHeaders: boolean;
    concatMethod: ConcatMethod;
    sqStart: number;
    sqEnd: number;
    isLowLatencyLiveStream: boolean;
    isPremiumVideo: boolean;
    isFFmpegAvailable: boolean;
    isFFprobeAvailable: boolean;
    constructor(videoUrl: any, { format, verbose, keep, threads, concatMethod, headers }: Partial<DownloaderOptions>);
    download(): Promise<void>;
}
export default Downloader;
