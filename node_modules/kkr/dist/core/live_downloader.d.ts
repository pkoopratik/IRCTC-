import { ConsoleLogger } from "./services/logger";
import YouTubeObserver from "./services/api/youtube_observer";
import { ConcatMethod } from "../utils/analyse_concat_method";
interface Task {
    type: "video" | "audio";
    url: string;
    id: number;
    retry: number;
    outputPath: string;
}
export interface LiveDownloaderOptions {
    videoUrl: string;
    format?: string;
    verbose?: boolean;
    keep?: boolean;
    threads?: number;
    concatMethod?: ConcatMethod;
    forceMerge?: boolean;
    cooldown?: number;
    headers?: string;
}
export interface OutputItem {
    description: string;
    path: string;
}
declare class LiveDownloader {
    keepTemporaryFiles: boolean;
    observer: YouTubeObserver;
    logger: ConsoleLogger;
    workDirectoryName: string;
    outputFilename: string;
    unfinishedTasks: Task[];
    finishedTasks: Task[];
    droppedTasks: Task[];
    outputFiles: OutputItem[];
    maxRunningThreads: number;
    nowRunningThreads: number;
    concatMethod: ConcatMethod;
    forceMerge: boolean;
    cooldown: number;
    headers: Record<string, string>;
    stopFlag: boolean;
    finishFlag: boolean;
    isLowLatencyLiveStream: boolean;
    isLiveDvrEnabled: boolean;
    isPremiumVideo: boolean;
    latencyClass: string;
    isFFmpegAvailable: boolean;
    isFFprobeAvailable: boolean;
    constructor(videoUrl: any, { format, verbose, keep, threads, concatMethod, forceMerge, cooldown, headers }: Partial<LiveDownloaderOptions>);
    start(): Promise<void>;
    checkQueue(): Promise<void>;
    beforeExit(): Promise<void>;
    clean(): Promise<void>;
    handleTask(task: Task): Promise<void>;
    merge(videoPath: string, audioPath: string, suffix: string | number): Promise<string>;
    mergeSequences(videoFileListPath: string, audioFileListPath: string, suffix: string | number): Promise<string>;
}
export default LiveDownloader;
