#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const erii_1 = require("erii");
const fs = require("fs");
const path = require("path");
const downloader_1 = require("./core/downloader");
const live_downloader_1 = require("./core/live_downloader");
erii_1.default.setMetaInfo({
    name: "KKR",
    version: JSON.parse(fs.readFileSync(path.resolve(__dirname, "../package.json")).toString()).version,
});
erii_1.default.bind({
    name: ["download", "d"],
    description: "Download video",
    argument: {
        name: "url",
        description: "Video URL",
    },
}, (ctx, options) => __awaiter(void 0, void 0, void 0, function* () {
    if (options.live) {
        const videoUrl = ctx.getArgument().toString();
        const downloader = new live_downloader_1.default(videoUrl, options);
        downloader.start();
    }
    else {
        const videoUrl = ctx.getArgument().toString();
        const downloader = new downloader_1.default(videoUrl, options);
        downloader.download();
    }
}));
erii_1.default.addOption({
    name: ["live"],
    command: "download",
    description: "Download live",
});
erii_1.default.addOption({
    name: ["keep", "k"],
    command: "download",
    description: "Keep temporary files",
});
erii_1.default.addOption({
    name: ["threads"],
    command: "download",
    description: "Max download threads",
    argument: {
        name: "n",
        description: "Number of threads",
    },
});
erii_1.default.addOption({
    name: ["concat-method"],
    command: "download",
    description: "Concat method",
});
erii_1.default.addOption({
    name: ["force-merge"],
    command: "download",
    description: "Ignore missing chunks and merge all downloaded chunks to a single file (Live mode only)",
});
erii_1.default.addOption({
    name: ["cooldown"],
    command: "download",
    argument: {
        name: "time",
        description: "Cooldown time in milliseconds",
    },
    description: "Add cooldown between chunk downloads (Live mode only)",
});
erii_1.default.addOption({
    name: ["headers"],
    command: "download",
    description: "Custom HTTP headers",
    argument: {
        name: "headers",
        description: '(Optional) Custom HTTP headers. Multi headers should be splitted with "\\n"',
    },
});
erii_1.default.addOption({
    name: ["verbose", "debug"],
    description: "Debug output",
});
erii_1.default.bind({
    name: ["help", "h"],
    description: "Show help documentation",
}, (ctx) => {
    ctx.showHelp();
});
erii_1.default.bind({
    name: ["version"],
    description: "Show version",
}, (ctx) => {
    ctx.showVersion();
});
erii_1.default.default(() => {
    erii_1.default.showHelp();
});
erii_1.default.okite();
//# sourceMappingURL=index.js.map