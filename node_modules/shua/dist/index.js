#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require('fs');
var path = require('path');
var erii_1 = require("erii");
var downloader_1 = require("./core/downloader");
var system_1 = require("./utils/system");
erii_1.default.setMetaInfo({
    version: JSON.parse(fs.readFileSync(path.resolve(__dirname, '../package.json')).toString())['version'],
    name: 'Shua / A lovely downloader'
});
erii_1.default.bind({
    name: ['help', 'h'],
    description: 'Show help documentation',
    argument: {
        name: 'command',
        description: 'Show help',
    }
}, function (ctx) {
    ctx.showHelp();
});
erii_1.default.bind({
    name: ['file', 'f'],
    description: 'Download urls in a file',
    argument: {
        name: 'input_path',
        description: 'file path',
    }
}, function (ctx, options) { return __awaiter(void 0, void 0, void 0, function () {
    var path, downloader;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                path = ctx.getArgument().toString();
                downloader = new downloader_1.default(options);
                return [4 /*yield*/, downloader.loadUrlsFromFile(path)];
            case 1:
                _a.sent();
                downloader.start();
                downloader.once('finish', function () {
                    process.exit();
                });
                return [2 /*return*/];
        }
    });
}); });
erii_1.default.bind({
    name: ['json', 'j'],
    description: 'Import tasks from a JSON file',
    argument: {
        name: 'input_path',
        description: 'file path',
    }
}, function (ctx, options) {
    var path = ctx.getArgument().toString();
    var downloader = new downloader_1.default(options);
    downloader.loadUrlsFromJSON(path);
    downloader.start();
    downloader.once('finish', function () {
        process.exit();
    });
});
erii_1.default.bind({
    name: ['expression', 'e'],
    description: 'Download urls from a expression',
    argument: {
        name: 'expression',
        description: 'Url expression'
    }
}, function (ctx, options) {
    var expression = ctx.getArgument().toString();
    var downloader = new downloader_1.default(options);
    downloader.loadUrlsFromExpression(expression);
    downloader.start();
    downloader.once('finish', function () {
        process.exit();
    });
});
erii_1.default.bind({
    name: ['clean'],
    description: '[DEBUG ONLY DO NOT USE]',
}, function () {
    var e_1, _a;
    try {
        for (var _b = __values(fs.readdirSync(path.resolve(__dirname, '../'))), _c = _b.next(); !_c.done; _c = _b.next()) {
            var file = _c.value;
            if (file.startsWith('shua_download_')) {
                system_1.deleteDirectory(path.resolve(__dirname, "../" + file));
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    fs.writeFileSync(path.resolve(__dirname, '../tasks.json'), '[]');
});
erii_1.default.addOption({
    name: 'headers',
    description: 'Custom HTTP headers',
    argument: {
        name: 'headers',
        description: '(Optional) Custom HTTP headers. Multi headers should be splitted with "\\n\"',
    }
});
erii_1.default.addOption({
    name: 'threads',
    description: 'Threads limit',
    argument: {
        name: 'limit',
        description: '(Optional) Limit of threads, defaults to 8'
    }
});
erii_1.default.addOption({
    name: 'timeout',
    description: 'Timeout threshold for each segment.',
    argument: {
        name: 'limit',
        description: '(Optional) Timeout threshold in ms, defaults to 30000'
    }
});
erii_1.default.addOption({
    name: ['output', 'o'],
    description: 'Set output direcotry',
    argument: {
        name: 'path',
        description: '(Optional) Output files path',
        validate: function (outputPath, logger) {
            if (path.basename(outputPath).match(/[\*\:|\?<>]/)) {
                logger('Filename should\'t contain :, |, <, >.');
                return false;
            }
            return true;
        }
    }
});
erii_1.default.addOption({
    name: ['verbose', 'debug'],
    description: 'Debug output'
});
erii_1.default.addOption({
    name: ['ascending'],
    description: 'Rename output files numerical ascendingly'
});
erii_1.default.default(function () {
    erii_1.default.showHelp();
});
erii_1.default.okite();
//# sourceMappingURL=index.js.map