"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var url_1 = require("url");
var axios_1 = require("axios");
var logger_1 = require("./logger");
var http = require("http");
var https = require("https");
var axiosInstance = axios_1.default.create({
    httpAgent: new http.Agent({ keepAlive: true }),
    httpsAgent: new https.Agent({ keepAlive: true }),
});
/**
 * 下载文件
 * @param url URL
 * @param path 保存路径
 * @param options 设置
 * @return {Promise<void>}
 */
function downloadFile(url, path, _a) {
    var _this = this;
    var _b = _a === void 0 ? {} : _a, _c = _b.timeout, timeout = _c === void 0 ? 60000 : _c, headers = _b.headers;
    var CancelToken = axios_1.default.CancelToken;
    var source = CancelToken.source();
    var promise = new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
        var response, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, 3, 4]);
                    setTimeout(function () {
                        source && source.cancel();
                        source = null;
                    }, timeout);
                    return [4 /*yield*/, axiosInstance({
                            url: url,
                            method: "GET",
                            responseType: "arraybuffer",
                            headers: __assign({ Host: new url_1.URL(url).host }, headers),
                            cancelToken: source.token,
                        })];
                case 1:
                    response = _a.sent();
                    if (response.headers["content-length"] &&
                        parseInt(response.headers["content-length"]) !== response.data.length) {
                        reject("Bad response");
                    }
                    fs.writeFileSync(path, response.data);
                    response = null;
                    resolve();
                    return [3 /*break*/, 4];
                case 2:
                    e_1 = _a.sent();
                    reject(e_1);
                    return [3 /*break*/, 4];
                case 3:
                    source = null;
                    return [7 /*endfinally*/];
                case 4: return [2 /*return*/];
            }
        });
    }); });
    return promise;
}
exports.downloadFile = downloadFile;
function loadRemoteFile(url, _a) {
    var _this = this;
    var _b = _a === void 0 ? {} : _a, _c = _b.timeout, timeout = _c === void 0 ? 3000 : _c, headers = _b.headers;
    return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
        var retries, _loop_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    retries = 5;
                    _loop_1 = function () {
                        var CancelToken, source, response, e_2;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    CancelToken = axios_1.default.CancelToken;
                                    source = CancelToken.source();
                                    _a.label = 1;
                                case 1:
                                    _a.trys.push([1, 3, , 4]);
                                    setTimeout(function () {
                                        source && source.cancel();
                                        source = null;
                                    }, timeout);
                                    return [4 /*yield*/, axios_1.default({
                                            url: url,
                                            method: "GET",
                                            responseType: "text",
                                            headers: __assign({ Host: new url_1.URL(url).host }, headers),
                                            cancelToken: source.token,
                                        })];
                                case 2:
                                    response = _a.sent();
                                    resolve(response.data);
                                    return [3 /*break*/, 4];
                                case 3:
                                    e_2 = _a.sent();
                                    logger_1.default.warning("Load remote file error, retry. [" + (e_2.code ||
                                        (e_2.response ? e_2.response.status + " " + e_2.response.statusText : undefined) ||
                                        e_2.message ||
                                        e_2.constructor.name ||
                                        "UNKNOWN") + "]");
                                    logger_1.default.debug(e_2);
                                    retries--;
                                    if (retries <= 0) {
                                        reject(e_2);
                                    }
                                    return [3 /*break*/, 4];
                                case 4: return [2 /*return*/];
                            }
                        });
                    };
                    _a.label = 1;
                case 1:
                    if (!(retries > 0)) return [3 /*break*/, 3];
                    return [5 /*yield**/, _loop_1()];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 1];
                case 3: return [2 /*return*/];
            }
        });
    }); });
}
exports.loadRemoteFile = loadRemoteFile;
//# sourceMappingURL=file.js.map