/// <reference types="node" />
import { EventEmitter } from "events";
import { Logger } from "../utils/logger";
export interface DownloaderOptions {
    /** 并发数量 */
    threads: number;
    /** 超时阈值 */
    timeout: number;
    /** Custom HTTP Headers */
    headers: string;
    /** 输出目录 */
    output: string;
    /** 是否以数字增序重命名文件 */
    ascending: boolean;
    /** 是否启用调试输出 */
    verbose?: boolean;
    /** 自定义 Logger */
    logger?: Logger;
}
/**
 * 下载任务结构
 */
export interface DownloadTask {
    /** URL */
    url: string;
    /** 重试计数 */
    retryCount: number;
    /** 输出文件名 */
    filename?: string;
    /** 自定义 Headers */
    headers?: Record<string, string>;
}
export declare class JSONParseError extends Error {
}
export declare class LoadRemoteFileError extends Error {
}
declare class Downloader extends EventEmitter {
    threads: number;
    timeout: number;
    headers: Record<string, unknown>;
    output: string;
    ascending: boolean;
    verbose: boolean;
    logger: Logger;
    /** 当前运行并发数量 */
    nowRunningThreadsCount: number;
    /** 全部任务数 */
    totalCount: number;
    /** 已完成任务数 */
    finishCount: number;
    startTime: Date;
    isEnd: boolean;
    /**
     * 所有需要下载的任务
     * 开始后不修改
     */
    tasks: DownloadTask[];
    /**
     * 未完成的任务
     */
    unfinishedTasks: DownloadTask[];
    constructor({ threads, headers, output, ascending, timeout, verbose, logger }: Partial<DownloaderOptions>);
    /**
     * 从文件添加下载文件 URL
     * @param path 文件路径
     */
    loadUrlsFromFile(path: string): Promise<void>;
    /**
     * 从表达式添加任务
     * @param expression 表达式
     */
    loadUrlsFromExpression(expression: string): void;
    /**
     * 从URL数组添加任务
     * @param urls URL数组
     */
    loadUrlsFromArray(urls: string[]): void;
    /**
     * 从 JSON 文件添加任务
     * @param path
     */
    loadUrlsFromJSON(path: string): void;
    checkAscending(): void;
    /**
     * 开始下载
     */
    start(): void;
    /**
     * 检查下载队列
     */
    checkQueue(): Promise<void>;
    handleTask(task: DownloadTask): Promise<void>;
    getETA(): string;
}
export default Downloader;
