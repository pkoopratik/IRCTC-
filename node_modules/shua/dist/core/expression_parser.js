"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
var ExpressionParser = /** @class */ (function () {
    function ExpressionParser(expression) {
        this.urls = [];
        this.expression = expression;
        this.parse();
    }
    ExpressionParser.prototype.parse = function () {
        var e_1, _a;
        // Integer expression
        var integerExpressionMatchResults = __spread(this.expression.matchAll(/({{%d.+?}})/ig));
        if (integerExpressionMatchResults.length > 0) {
            var firstIntegerExpressionMatchResult = integerExpressionMatchResults.shift();
            var integerExpressionArgumentMatchResult = firstIntegerExpressionMatchResult[1].match(/{{%d\((.+?)\)}}/);
            if (!integerExpressionArgumentMatchResult) {
                throw new Error('Invalid integer expression');
            }
            var integerExpressionArguments = firstIntegerExpressionMatchResult[1].match(/{{%d\((.+?)\)}}/)[1].split(',').map(function (a) { return parseInt(a); });
            if (integerExpressionArguments.length < 2 || integerExpressionArguments.length > 4 || integerExpressionArguments.some(function (a) { return isNaN(a); })) {
                console.error("ERROR: Wrong arguments for integer expression");
                console.error("" + this.expression);
                console.error("" + new Array(firstIntegerExpressionMatchResult.index).fill(' ').join('') + new Array(firstIntegerExpressionMatchResult[1].length).fill('^').join(''));
                throw new Error('Invalid integer expression: wrong arguments');
            }
            if (integerExpressionArguments[1] >= integerExpressionArguments[0]) {
                if (integerExpressionArguments[2] !== undefined && integerExpressionArguments[2] <= 0) {
                    throw new Error('Invalid integer expression: infinite list');
                }
            }
            if (integerExpressionArguments[0] >= integerExpressionArguments[1]) {
                if (integerExpressionArguments[2] !== undefined && integerExpressionArguments[2] >= 0) {
                    throw new Error('Invalid integer expression: infinite list');
                }
            }
            var _b = __read(integerExpressionArguments, 4), start = _b[0], end = _b[1], _c = _b[2], step = _c === void 0 ? 1 : _c, _d = _b[3], leftPad = _d === void 0 ? 0 : _d;
            for (var i = start; (step > 0 ? (i <= end) : (i >= end)); i += step) {
                this.urls.push(this.expression.slice(0, firstIntegerExpressionMatchResult.index) + i.toString().padStart(leftPad, '0') + this.expression.slice(firstIntegerExpressionMatchResult.index + firstIntegerExpressionMatchResult[1].length));
            }
        }
        if (integerExpressionMatchResults.length > 0) {
            var result = [];
            try {
                for (var _e = __values(this.urls), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var url = _f.value;
                    result.push.apply(result, __spread(new ExpressionParser(url).getUrls()));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
                }
                finally { if (e_1) throw e_1.error; }
            }
            this.urls = result;
        }
    };
    ExpressionParser.prototype.getUrls = function () {
        return this.urls;
    };
    return ExpressionParser;
}());
exports.default = ExpressionParser;
//# sourceMappingURL=expression_parser.js.map