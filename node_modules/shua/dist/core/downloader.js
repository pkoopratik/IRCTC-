"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var path = require("path");
var url_1 = require("url");
var events_1 = require("events");
var file_1 = require("../utils/file");
var expression_parser_1 = require("./expression_parser");
var logger_1 = require("../utils/logger");
var constants_1 = require("../constants");
var JSONParseError = /** @class */ (function (_super) {
    __extends(JSONParseError, _super);
    function JSONParseError() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return JSONParseError;
}(Error));
exports.JSONParseError = JSONParseError;
var LoadRemoteFileError = /** @class */ (function (_super) {
    __extends(LoadRemoteFileError, _super);
    function LoadRemoteFileError() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return LoadRemoteFileError;
}(Error));
exports.LoadRemoteFileError = LoadRemoteFileError;
var Downloader = /** @class */ (function (_super) {
    __extends(Downloader, _super);
    function Downloader(_a) {
        var e_1, _b, e_2, _c;
        var threads = _a.threads, headers = _a.headers, output = _a.output, ascending = _a.ascending, timeout = _a.timeout, verbose = _a.verbose, logger = _a.logger;
        var _this = _super.call(this) || this;
        // Config
        _this.threads = 8;
        _this.timeout = 30000;
        _this.headers = {};
        _this.output = "./shua_download_" + new Date().valueOf().toString();
        _this.ascending = false;
        _this.verbose = false;
        // Runtime Status
        /** 当前运行并发数量 */
        _this.nowRunningThreadsCount = 0;
        /** 已完成任务数 */
        _this.finishCount = 0;
        _this.isEnd = false;
        /**
         * 所有需要下载的任务
         * 开始后不修改
         */
        _this.tasks = [];
        /**
         * 未完成的任务
         */
        _this.unfinishedTasks = [];
        _this.logger = logger || new logger_1.ConsoleLogger();
        if (threads) {
            _this.threads = threads;
        }
        if (timeout) {
            _this.timeout = timeout;
        }
        _this.headers = {
            "User-Agent": constants_1.DEFAULT_USER_AGENT,
        };
        if (headers) {
            var headerConfigArr = Array.isArray(headers) ? headers : [headers];
            try {
                for (var headerConfigArr_1 = __values(headerConfigArr), headerConfigArr_1_1 = headerConfigArr_1.next(); !headerConfigArr_1_1.done; headerConfigArr_1_1 = headerConfigArr_1.next()) {
                    var headerConfig = headerConfigArr_1_1.value;
                    try {
                        for (var _d = (e_2 = void 0, __values(headerConfig.split("\\n"))), _e = _d.next(); !_e.done; _e = _d.next()) {
                            var h = _e.value;
                            try {
                                var header = /^([^ :]+):(.+)$/.exec(h).slice(1);
                                _this.headers[header[0]] = header[1].trim();
                            }
                            catch (e) {
                                logger.warning("HTTP Headers invalid. Ignored.");
                            }
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_e && !_e.done && (_c = _d.return)) _c.call(_d);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (headerConfigArr_1_1 && !headerConfigArr_1_1.done && (_b = headerConfigArr_1.return)) _b.call(headerConfigArr_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            // // Apply global custom headers
            // axios.defaults.headers.common = {
            //     ...axios.defaults.headers.common,
            //     "User-Agent": DEFAULT_USER_AGENT,
            //     ...this.headers,
            // };
        }
        if (output) {
            if (!fs.existsSync(output)) {
                throw new Error("Output path is not exist.");
            }
            _this.output = output;
        }
        if (ascending) {
            _this.ascending = ascending;
        }
        if (verbose) {
            _this.verbose = verbose;
            _this.logger.enableDebug();
        }
        return _this;
    }
    /**
     * 从文件添加下载文件 URL
     * @param path 文件路径
     */
    Downloader.prototype.loadUrlsFromFile = function (path) {
        return __awaiter(this, void 0, void 0, function () {
            var text, isLoadFromRemote, e_3, tasks, lines, lines_1, lines_1_1, line, url;
            var e_4, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        isLoadFromRemote = false;
                        if (!(path.startsWith("http://") || path.startsWith("https://"))) return [3 /*break*/, 5];
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 3, , 4]);
                        this.logger.debug("Load file from " + path);
                        isLoadFromRemote = true;
                        return [4 /*yield*/, file_1.loadRemoteFile(path)];
                    case 2:
                        text = _c.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_3 = _c.sent();
                        throw new LoadRemoteFileError("Load remote file failed.");
                    case 4: return [3 /*break*/, 6];
                    case 5:
                        text = fs.readFileSync(path).toString();
                        _c.label = 6;
                    case 6:
                        tasks = [];
                        lines = text
                            .split("\n")
                            .map(function (line) { return line.trim(); })
                            .filter(function (line) { return !!line; });
                        try {
                            for (lines_1 = __values(lines), lines_1_1 = lines_1.next(); !lines_1_1.done; lines_1_1 = lines_1.next()) {
                                line = lines_1_1.value;
                                url = void 0;
                                if (line.startsWith("#")) {
                                    continue;
                                }
                                if (line.startsWith("http://") || line.startsWith("https://")) {
                                    url = line;
                                }
                                else if (isLoadFromRemote) {
                                    try {
                                        url = new url_1.URL(line, path).href;
                                    }
                                    catch (e) {
                                        // ignore
                                    }
                                }
                                if (url) {
                                    tasks.push({ url: url, retryCount: 0 });
                                }
                            }
                        }
                        catch (e_4_1) { e_4 = { error: e_4_1 }; }
                        finally {
                            try {
                                if (lines_1_1 && !lines_1_1.done && (_a = lines_1.return)) _a.call(lines_1);
                            }
                            finally { if (e_4) throw e_4.error; }
                        }
                        (_b = this.tasks).push.apply(_b, __spread(tasks));
                        this.checkAscending();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * 从表达式添加任务
     * @param expression 表达式
     */
    Downloader.prototype.loadUrlsFromExpression = function (expression) {
        var _a;
        var expressionParser = new expression_parser_1.default(expression);
        (_a = this.tasks).push.apply(_a, __spread(expressionParser.getUrls().map(function (url) {
            return {
                url: url,
                retryCount: 0,
            };
        })));
        this.checkAscending();
    };
    /**
     * 从URL数组添加任务
     * @param urls URL数组
     */
    Downloader.prototype.loadUrlsFromArray = function (urls) {
        var _a;
        (_a = this.tasks).push.apply(_a, __spread(urls.map(function (url) {
            return {
                url: url,
                retryCount: 0,
            };
        })));
        this.checkAscending();
    };
    /**
     * 从 JSON 文件添加任务
     * @param path
     */
    Downloader.prototype.loadUrlsFromJSON = function (path) {
        var _a;
        var _b;
        var text = fs.readFileSync(path).toString();
        var tasks = JSON.parse(text);
        if (!((_b = tasks) === null || _b === void 0 ? void 0 : _b.length)) {
            throw new JSONParseError("Invalid JSON file.");
        }
        if (tasks.some(function (task) { return !task.url; })) {
            throw new JSONParseError("Missing URL for tasks in JSON file.");
        }
        (_a = this.tasks).push.apply(_a, __spread(tasks.map(function (task) { return (__assign(__assign({}, task), { retryCount: 0 })); })));
        this.checkAscending();
    };
    Downloader.prototype.checkAscending = function () {
        var e_5, _a;
        if (this.ascending) {
            // 增序重命名文件
            var maxLength = this.tasks.length.toString().length;
            var counter = 0;
            try {
                for (var _b = __values(this.tasks), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var task = _c.value;
                    var urlPath = new url_1.URL(task.url).pathname.slice(1).split("/");
                    var ext = void 0;
                    if (urlPath[urlPath.length - 1].includes(".")) {
                        ext = urlPath[urlPath.length - 1].split(".").slice(-1)[0];
                    }
                    if (ext) {
                        task.filename = counter.toString().padStart(maxLength, "0") + ("." + ext);
                    }
                    else {
                        task.filename = counter.toString().padStart(maxLength, "0");
                    }
                    counter++;
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
    };
    /**
     * 开始下载
     */
    Downloader.prototype.start = function () {
        this.startTime = new Date();
        this.unfinishedTasks = __spread(this.tasks);
        this.totalCount = this.tasks.length;
        if (process.platform === "win32") {
            var rl = require("readline").createInterface({
                input: process.stdin,
                output: process.stdout,
            });
            rl.on("SIGINT", function () {
                // @ts-ignore
                process.emit("SIGINT");
            });
        }
        process.on("SIGINT", function () {
            process.exit();
        });
        if (!fs.existsSync(this.output)) {
            fs.mkdirSync(this.output);
        }
        this.checkQueue();
    };
    /**
     * 检查下载队列
     */
    Downloader.prototype.checkQueue = function () {
        return __awaiter(this, void 0, void 0, function () {
            var task, e_6;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.isEnd) {
                            return [2 /*return*/];
                        }
                        if (!(this.nowRunningThreadsCount < this.threads && this.unfinishedTasks.length > 0)) return [3 /*break*/, 5];
                        if (!(this.unfinishedTasks.length > 0)) return [3 /*break*/, 5];
                        task = this.unfinishedTasks.shift();
                        this.nowRunningThreadsCount++;
                        this.checkQueue();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.handleTask(task)];
                    case 2:
                        _a.sent();
                        this.nowRunningThreadsCount--;
                        this.finishCount++;
                        this.logger.info(this.finishCount + " / " + this.totalCount + " or " + ((this.finishCount / this.totalCount) *
                            100).toFixed(2) + "% finished | ETA: " + this.getETA());
                        this.emit("progress", this.finishCount, this.totalCount);
                        this.emit("task-finish", task);
                        return [3 /*break*/, 5];
                    case 3:
                        e_6 = _a.sent();
                        this.logger.warning("Download " + task.url + " failed, retry later. [" + (e_6.code ||
                            (e_6.response ? e_6.response.status + " " + e_6.response.statusText : undefined) ||
                            e_6.message ||
                            e_6.constructor.name ||
                            "UNKNOWN") + "]");
                        this.logger.debug(e_6.request);
                        this.unfinishedTasks.push(task);
                        this.nowRunningThreadsCount--;
                        this.emit("task-error", e_6, task);
                        return [3 /*break*/, 5];
                    case 4:
                        this.checkQueue();
                        return [7 /*endfinally*/];
                    case 5:
                        if (this.nowRunningThreadsCount === 0 && this.unfinishedTasks.length === 0) {
                            this.isEnd = true;
                            this.logger.info("All finished. Please checkout your files at [" + this.output + "]");
                            this.emit("finish");
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    Downloader.prototype.handleTask = function (task) {
        return __awaiter(this, void 0, void 0, function () {
            var filename, p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        filename = new url_1.URL(task.url).pathname.slice(1);
                        p = filename.split("/");
                        return [4 /*yield*/, file_1.downloadFile(task.url, path.resolve(this.output, task.filename !== undefined ? task.filename : p[p.length - 1]), __assign(__assign({}, (task.headers
                                ? {
                                    headers: __assign(__assign({}, this.headers), task.headers),
                                }
                                : {
                                    headers: __assign({}, this.headers),
                                })), { timeout: this.timeout }))];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Downloader.prototype.getETA = function () {
        var usedTime = new Date().valueOf() - this.startTime.valueOf();
        var remainingTimeInSeconds = Math.round(((usedTime / this.finishCount) * this.totalCount - usedTime) / 1000);
        if (remainingTimeInSeconds < 60) {
            return remainingTimeInSeconds + "s";
        }
        else if (remainingTimeInSeconds < 3600) {
            return Math.floor(remainingTimeInSeconds / 60) + "m " + remainingTimeInSeconds % 60 + "s";
        }
        else {
            return Math.floor(remainingTimeInSeconds / 3600) + "h " + Math.floor((remainingTimeInSeconds % 3600) / 60) + "m " + remainingTimeInSeconds % 60 + "s";
        }
    };
    return Downloader;
}(events_1.EventEmitter));
exports.default = Downloader;
//# sourceMappingURL=downloader.js.map