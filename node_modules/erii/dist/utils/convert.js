"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createCamelProxifiedObject = exports.convertObjectKey = exports.toKebabCase = exports.toCamelCase = void 0;
function toCamelCase(str) {
    return str.replace(/([-_][a-z])/gi, ($1) => {
        return $1.toUpperCase().replace("-", "");
    });
}
exports.toCamelCase = toCamelCase;
function toKebabCase(str) {
    return (str[0].toLowerCase() +
        str
            .slice(1, str.length)
            .replace(/[A-Z]/g, (letter) => `-${letter.toLowerCase()}`));
}
exports.toKebabCase = toKebabCase;
function convertObjectKey(before) {
    return Object.fromEntries(Object.entries(before).map(([key, value]) => [toCamelCase(key), value]));
}
exports.convertObjectKey = convertObjectKey;
function createCamelProxifiedObject(before) {
    const originalObject = before;
    return new Proxy(before, {
        get: (target, key) => {
            var _a;
            return (_a = originalObject[key]) !== null && _a !== void 0 ? _a : originalObject[toKebabCase(key)];
        },
        set: (target, key, value) => {
            // 如果赋值的是camel case的key，而驼峰形式key是从kebab case的key proxy来的 则赋值其kebab case形式的key的值
            if (!key.includes("-") &&
                (originalObject[key] === undefined ||
                    originalObject[key] === null) &&
                originalObject[toKebabCase(key)] !== undefined &&
                originalObject[toKebabCase(key)] !== null) {
                target[toKebabCase(key)] = value;
            }
            else {
                target[key] = value;
            }
            return value;
        },
    });
}
exports.createCamelProxifiedObject = createCamelProxifiedObject;
//# sourceMappingURL=convert.js.map